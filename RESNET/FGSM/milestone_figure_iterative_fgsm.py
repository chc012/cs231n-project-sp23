################################################################################
#                                                                              #
# This code runs iterative FGSM on an example image.                           #
# The algorithm was introduced in ADVERSARIAL EXAMPLES IN THE PHYSICAL WORLD,  #
# ICLR 2017.                                                                   #
#                                                                              #
# It produces adversarial images with quasi-imperctible perturbations          #
#                                                                              #
# Authors:  Jason Anderson <jand271@stanford.edu>                              #
#                                                                              #
# Usage: Run python milestone_figure_iterative_fgsm.py                         #
#                                                                              #
#                                                                              #
# Copyright 2023 Jason Anderson <jand271@stanford.edu>                         #
#                                                                              #
#                           MIT License                                        #
#                                                                              #
# Permission is hereby granted, free of charge, to any person obtaining a copy #
# of this software and associated documentation files (the “Software”), to     #
# deal in the Software without restriction, including without limitation the   #
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or  #
# sell copies of the Software, and to permit persons to whom the Software is   #
# furnished to do so, subject to the following conditions:                     #
#                                                                              #
# The above copyright notice and this permission notice shall be included in   #
# all copies or substantial portions of the Software.                          #
#                                                                              #
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,              #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF           #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO #
# EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,        #
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR        #
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE    #
# USE OR OTHER DEALINGS IN THE SOFTWARE.                                       #
#                                                                              #
#                                                                              #
################################################################################

import numpy as np
import timm
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform

import torch
from torchvision.transforms import Resize, CenterCrop, ToPILImage
from torchvision.transforms import Normalize, Compose

from PIL import Image
import matplotlib.pyplot as plt


def inverse_transform(image):
    # inverse transform generated by request from ChatGPT by supplying the print(transform) from below
    inv_normalize = Normalize(
        mean=[-0.485 / 0.229, -0.456 / 0.224, -0.406 / 0.225],
        std=[1 / 0.229, 1 / 0.224, 1 / 0.225]
    )

    image = inv_normalize(image)
    image = ToPILImage()(image)
    image = CenterCrop(size=(235, 235))(image)
    image = Resize(size=(224, 224), interpolation=2)(image)
    return image


if __name__ == '__main__':

    model = timm.create_model('hf-hub:nateraw/resnet50-oxford-iiit-pet', pretrained=True)
    model.eval() # Set model to eval mode for inference

    # Create Transform from image to input
    transform = create_transform(**resolve_data_config(model.pretrained_cfg, model=model))

    labels = model.pretrained_cfg['labels']
    top_k = min(len(labels), 5)

    # Use your own image file here...
    image = Image.open('Boxer-dog.jpg').convert('RGB')
    target_label = torch.tensor([8])

    # Process PIL image with transforms and add a batch dimension
    x = transform(image).unsqueeze(0)
    x.requires_grad = True
    x_init = x

    print(f'Original Label: {labels[target_label]}')

    lr = 1e-3
    for i in range(100):

        # compute relvant derivatives
        y_pred = model(x)
        loss = torch.nn.functional.cross_entropy(y_pred, target_label)
        model.zero_grad()
        loss.backward()
        dx_sign = x.grad.sign()

        x.data = x.data + lr * dx_sign.data

        current_label = y_pred.argmax()

        if current_label != target_label:
            break

    print(f'learning rate: {lr:0.3e}')

    print(f'New Label: {labels[current_label]}')

    # Display initial image
    plt.imshow(inverse_transform(x_init.squeeze()))
    plt.axis('off')
    plt.savefig('boxer_orig_fgsm_step.png')
    plt.show()

    # Display final image
    final_image = inverse_transform(x.squeeze())
    plt.imshow(final_image)
    plt.axis('off')
    plt.savefig('boxer_adv_fgsm_step.png')
    plt.show()
