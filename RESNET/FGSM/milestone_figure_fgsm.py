import numpy as np
import timm
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform

import torch
from torchvision.transforms import Resize, CenterCrop, ToPILImage
from torchvision.transforms import Normalize, Compose

from PIL import Image
import matplotlib.pyplot as plt


def inverse_transform(image):
    # inverse transform generated by request from ChatGPT by supplying the print(transform) from below
    inv_normalize = Normalize(
        mean=[-0.485 / 0.229, -0.456 / 0.224, -0.406 / 0.225],
        std=[1 / 0.229, 1 / 0.224, 1 / 0.225]
    )

    image = inv_normalize(image)
    image = ToPILImage()(image)
    image = CenterCrop(size=(235, 235))(image)
    image = Resize(size=(224, 224), interpolation=2)(image)
    return image


if __name__ == '__main__':

    model = timm.create_model('hf-hub:nateraw/resnet50-oxford-iiit-pet', pretrained=True)
    model.eval() # Set model to eval mode for inference

    # Create Transform from image to input
    transform = create_transform(**resolve_data_config(model.pretrained_cfg, model=model))

    labels = model.pretrained_cfg['labels']
    top_k = min(len(labels), 5)

    # Use your own image file here...
    image = Image.open('Boxer-dog.jpg').convert('RGB')
    target_label = torch.tensor([8])

    # Process PIL image with transforms and add a batch dimension
    x = transform(image).unsqueeze(0)
    x.requires_grad = True

    # compute relvant derivatives
    y_pred = model(x)
    loss = torch.nn.functional.cross_entropy(y_pred, target_label)
    model.zero_grad()
    loss.backward()
    dx_sign = x.grad.sign()

    x_adv = torch.zeros_like(x)

    print(f'Original Label: {labels[target_label]}')

    for epsilon in np.logspace(-10, -1):

        x_adv.data = x.data + epsilon * dx_sign.data

        y_pred = model(x_adv)

        current_label = y_pred.argmax()

        if current_label != target_label:
            break

    print(f'epsilon: {epsilon:0.3e}')

    print(f'New Label: {labels[current_label]}')

    # Display initial image
    plt.imshow(inverse_transform(x.squeeze()))
    plt.axis('off')
    plt.savefig('boxer_orig.png')
    plt.show()

    # Display final image
    final_image = inverse_transform(x_adv.squeeze())
    plt.imshow(final_image)
    plt.axis('off')
    plt.savefig('boxer_adv.png')
    plt.show()

